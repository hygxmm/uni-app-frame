<template>
	<view class="page">
		<swiper class="swiper" :circular="circular" :vertical="true" @change="onSwiperChange">
		    <swiper-item class="swiper-item" v-for="item in videoList" :key="item.id">
		        <video
                    class="video"
                    :id="item.id"
                    :ref="item.id"
                    :src="item.src"
                    objectFit="contain"
                    :controls="false"
                    :loop="true"
		            :show-center-play-btn="false"
                >
                    <!-- <cover-view class="cover-right">
                        <cover-view>头像</cover-view>
                        <cover-view>点赞</cover-view>
                        <cover-view>评论</cover-view>
                        <cover-view>分享</cover-view>
                        <cover-view>歌曲</cover-view>
                    </cover-view> -->
                    <view class="cover-bottom">
                        <view><text class="text-white text-lg">@范思思</text></view>
                        <view><text class="text-white text-df">#seraphine 众里寻他千百度,,蓦然回首,那人却在灯火阑珊处</text></view>
                        <view><text class="text-white text-df">@范思思创作的原声 - 范思思</text></view>
                    </view>
                </video>
		    </swiper-item>
		</swiper>
	</view>
</template>

<script>
    const videoData = [{
            src: 'http://192.168.10.217:8000/static/advert.mp4'
        },
        {
            src: 'http://192.168.10.217:8000/static/advert.mp4'
        },
        {
            src: 'http://192.168.10.217:8000/static/advert.mp4'
        },
        {
            src: 'http://192.168.10.217:8000/static/advert.mp4'
        },
        {
            src: 'http://192.168.10.217:8000/static/advert.mp4'
        },
        {
            src: 'http://192.168.10.217:8000/static/advert.mp4'
        }
    ];
	export default {
		data() {
			return {
                circular: true,
                videoList: [{
                        id: "video0",
                        src: "",
                        img: ""
                    },
                    {
                        id: "video1",
                        src: "",
                        img: ""
                    },
                    {
                        id: "video2",
                        src: "",
                        img: ""
                    }
                ],
                videoDataList: []

			}
		},
        onLoad(e) {

        },
        onReady() {
            this.init();
            this.getData();
        },
		methods: {
            init(){
                this._videoIndex = 0;
                this._videoContextList = [];
                for(var i=0,l=this.videoList.length;i<l;i++){
                    this._videoContextList.push(uni.createVideoContext('video'+i,this));
                }
                this._videoDataIndex = 0;
            },
            getData(e){
                this.videoDataList = videoData;
                setTimeout(() => {
                    this.updateVideo(true);
                },200)

            },
            onSwiperChange(e) {
                let currentIndex = e.detail.current;
                if (currentIndex === this._videoIndex) {
                    return;
                }

                let isNext = false;
                if (currentIndex === 0 && this._videoIndex === this.videoList.length - 1) {
                    isNext = true;
                } else if (currentIndex === this.videoList.length - 1 && this._videoIndex === 0) {
                    isNext = false;
                } else if (currentIndex > this._videoIndex) {
                    isNext = true;
                }

                if (isNext) {
                    this._videoDataIndex++;
                } else {
                    this._videoDataIndex--;
                }

                if (this._videoDataIndex < 0) {
                    this._videoDataIndex = this.videoDataList.length - 1;
                } else if (this._videoDataIndex >= this.videoDataList.length) {
                    this._videoDataIndex = 0;
                }

                this.circular = (this._videoDataIndex != 0);

                if (this._videoIndex >= 0) {
                    this._videoContextList[this._videoIndex].pause();
                    this._videoContextList[this._videoIndex].seek(0);
                }

                this._videoIndex = currentIndex;

                setTimeout(() => {
                    this.updateVideo(isNext);
                }, 200);
            },
            getNextIndex(isNext) {
                let index = this._videoIndex + (isNext ? 1 : -1);
                if (index < 0) {
                    return this.videoList.length - 1;
                } else if (index >= this.videoList.length) {
                    return 0;
                }
                return index;
            },
            getNextDataIndex(isNext) {
                let index = this._videoDataIndex + (isNext ? 1 : -1);
                if (index < 0) {
                    return this.videoDataList.length - 1;
                } else if (index >= this.videoDataList.length) {
                    return 0;
                }
                return index;
            },
            updateVideo(isNext) {
                this.$set(this.videoList[this._videoIndex], 'src', this.videoDataList[this._videoDataIndex].src);
                this.$set(this.videoList[this.getNextIndex(isNext)], 'src', this.videoDataList[this.getNextDataIndex(isNext)].src);
                setTimeout(() => {
                    this._videoContextList[this._videoIndex].play();
                }, 200);
                console.log("v:" + this._videoIndex + " d:" + this._videoDataIndex + "; next v:" + this.getNextIndex(
                    isNext) + " next d:" + this.getNextDataIndex(isNext));
            }
		}
	}
</script>

<style scoped>
    .page{
        flex: 1;
        width: 750rpx;
    }
    .swiper{
        flex: 1;
    }
    .swiper-item{
        flex: 1;
    }
    .video{
        flex: 1;
        background-color: #1CBBB4;
        position: relative;
    }
    .cover-right{
        width: 120rpx;
        height: 750rpx;
        position: absolute;
        bottom: 0;
        right: 0;
        background-color: #1CBBB4;
        color: #FFFFFF;
    }
    .cover-bottom{
        width: 630rpx;
        height: 200rpx;
        position: absolute;
        bottom: 0;
        left: 0;
        padding: 10rpx 20rpx;
        justify-content: space-between;
    }
</style>
